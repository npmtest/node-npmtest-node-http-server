{"/home/travis/build/npmtest/node-npmtest-node-http-server/test.js":"/* istanbul instrument in package npmtest_node_http_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-http-server/lib.npmtest_node_http_server.js":"/* istanbul instrument in package npmtest_node_http_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_http_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_http_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-http-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-http-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_http_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_http_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_http_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_http_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_http_server.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_http_server.__dirname + '/lib.npmtest_node_http_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-http-server/node_modules/node-http-server/server/http.js":"'use strict';\n\nconst http = require('http'),\n    https = require('https'),\n    url = require('url'),\n    path = require('path'),\n    fs = require('fs'),\n    querystring=require('querystring'),\n    Config = require(`${__dirname}/Config.js`);\n\nconst passedArgs = process.argv.splice(2),\n    argCount = passedArgs.length,\n    args = {};\n\nfor(let i=0; i<argCount; i++){\n    const data=passedArgs[i].split('=');\n    args[data[0]]=data[1];\n}\n\nif(args.launch=='now'){\n    const server=new Server;\n    server.deploy();\n}\n\nfunction deploy(userConfig, readyCallback){\n    Object.defineProperty(\n        this,\n        'server',\n        {\n            value:http.createServer(\n                requestRecieved.bind(this)\n            ),\n            writable:false,\n            enumerable:true\n        }\n    );\n    this.config=new this.Config(userConfig);\n\n    if(this.config.https && this.config.https.privateKey && this.config.https.certificate){\n        if(!this.config.https.port){\n            this.config.https.port=443;\n        }\n        this.config.httpsOptions = {\n            key: fs.readFileSync(this.config.https.privateKey),\n            cert: fs.readFileSync(this.config.https.certificate)\n        };\n\n        if(this.config.https.ca){\n            this.config.httpsOptions.ca=fs.readFileSync(this.config.https.ca);\n        }\n\n        Object.defineProperty(\n            this,\n            'secureServer',\n            {\n                value:https.createServer(\n                    this.config.httpsOptions,\n                    requestRecieved.bind(this)\n                ),\n                writable:false,\n                enumerable:true\n            }\n        );\n    }else{\n        this.config.https={\n            only:false\n        };\n    }\n\n    this.config.logID=`### ${this.config.domain} server`;\n\n    if(this.config.verbose){\n        console.log(\n            `${this.config.logID} configured with ###\\n\\n`,this.config);\n    }\n\n    this.server.timeout=this.config.server.timeout;\n\n    if(!this.config.https.only){\n        this.server.listen(\n            this.config.port,\n            function() {\n                if(this.config.verbose){\n                    console.log(`${this.config.logID} listening on port ${this.config.port} ###\\n\\n`);\n                }\n                if (readyCallback){\n                    //passes the current Server class instance for refrence.\n                    //this allows multiple servers to use the same ready callback if desired\n                    readyCallback(this);\n                }\n            }.bind(this)\n        );\n    }\n\n    if(this.config.httpsOptions){\n        this.secureServer.listen(\n            this.config.https.port,\n            function() {\n                if(this.config.verbose){\n                    console.log(`HTTPS: ${this.config.logID} listening on port ${this.config.https.port} ###\\n\\n`);\n                }\n                if (readyCallback){\n                    //passes the current Server class instance for refrence.\n                    //this allows multiple servers to use the same ready callback if desired\n                    readyCallback(this);\n                }\n            }.bind(this)\n        );\n    }\n}\n\nfunction setHeaders(response,headers){\n    const keys=Object.keys(headers);\n    for(const i in keys){\n        response.setHeader(\n            keys[i],\n            headers[keys[i]]\n        );\n    }\n}\n\nfunction serveFile(filename,exists,request,response) {\n    if(!exists) {\n        if(this.config.verbose){\n            console.log(`${this.config.logID} 404 ###\\n\\n`);\n        }\n\n        if(!response){\n            return false;\n        }\n\n        response.statusCode=404;\n        setHeaders(response, this.config.errors.headers);\n\n        this.serve(\n            request,\n            response,\n            this.config.errors['404']\n        );\n        return;\n    }\n\n    const contentType = path.extname(filename).slice(1);\n\n    //Only serve specified file types\n    if(!this.config.contentType[contentType]){\n        if(this.config.verbose){\n            console.log(`${this.config.logID} 415 ###\\n\\n`);\n        }\n\n        response.statusCode=415;\n        setHeaders(response, this.config.errors.headers);\n\n        this.serve(\n            request,\n            response,\n            this.config.errors['415']\n        );\n        return;\n    }\n\n    //default\n    if (\n        fs.statSync(filename).isDirectory()\n    ){\n        filename+=`/${this.config.server.index}`;\n    }\n\n    //Do not allow access to restricted file types\n    if (\n        this.config.restrictedType[contentType]\n    ){\n        if(this.config.verbose){\n            console.log(`${this.config.logID} 403 ###\\n\\n`);\n        }\n\n        response.statusCode=403;\n        setHeaders(response, this.config.errors.headers);\n\n        this.serve(\n            request,\n            response,\n            this.config.errors['403']\n        );\n        return;\n    }\n\n    fs.readFile(\n        filename,\n        'binary',\n        function(err, file) {\n            if(err) {\n                if(this.config.verbose){\n                    console.log(`${this.config.logID} 500 ###\\n\\n`,err,'\\n\\n');\n                }\n\n                response.statusCode=500;\n                setHeaders(response, this.config.errors.headers);\n\n                this.serve(\n                    request,\n                    response,\n                    this.config.errors['500'].replace(/\\{\\{err\\}\\}/g,err)\n                );\n                return;\n            }\n\n            response.setHeader(\n                'Content-Type',\n                this.config.contentType[contentType]\n            );\n\n            if(this.config.server.noCache){\n                response.setHeader(\n                    'Cache-Control',\n                    'no-cache, no-store, must-revalidate'\n                );\n            }\n\n            response.statusCode=200;\n\n            this.serve(\n                request,\n                response,\n                file,\n                'binary'\n            );\n\n            if(this.config.verbose){\n                console.log(`${this.config.logID} 200 ###\\n\\n`);\n            }\n\n            return;\n        }.bind(this)\n    );\n}\n\nfunction serve(request,response,body,encoding){\n    //defaults to 200\n    if(!response.statusCode){\n        response.statusCode=200;\n    }\n\n    //defaults to text/plain\n    if(!response.getHeader('Content-Type')){\n        response.setHeader(\n            'Content-Type',\n            'text/plain'\n        );\n\n        if(this.config.verbose){\n            console.log(`${this.config.logID} response content-type header not specified ###\\n\\nContent-Type set to: text/plain\\n\\n`);\n        }\n    }\n\n    //defaults to utf8\n    if(!encoding){\n        encoding='utf8';\n\n        if(this.config.verbose){\n            console.log(`${this.config.logID} encoding not specified ###\\nencoding set to:\\n`,encoding,'\\n\\n');\n        }\n    }\n\n    const refBody=new RefString;\n    const refEncoding=new RefString;\n\n    refBody.value=body;\n    refEncoding.value=encoding;\n\n    //return any value to force delayed serving\n    if(\n        this.beforeServe(\n            request,\n            response,\n            refBody,\n            refEncoding,\n            completeServing.bind(this)\n        )\n    ){\n        return;\n    };\n\n    completeServing.bind(this)(request,response,refBody,encoding);\n\n    return;\n}\n\nfunction completeServing(request,response,refBody,refEncoding){\n    if(!(refBody instanceof RefString)){\n        refBody=new RefString(refBody);\n    }\n\n    if(!(refEncoding instanceof RefString)){\n        refEncoding=new RefString(refEncoding||'binary');\n    }\n\n    if(response.finished){\n        this.afterServe(request);\n        return;\n    }\n\n    response.end(\n        refBody.value,\n        refEncoding.value,\n        this.afterServe.bind(this,request)\n    );\n}\n\nfunction RefString(value){\n    Object.defineProperties(\n        this,\n        {\n            value:{\n                value:value||'',\n                enumerable:true,\n                writable:true\n            }\n        }\n    );\n}\n\nfunction requestRecieved(request,response){\n    if(this.config.log){\n        const logData={\n            method  : request.method,\n            url     : request.url,\n            headers : request.headers\n        };\n\n        this.config.logFunction(\n            logData\n        );\n    }\n\n    let uri = url.parse(request.url);\n    uri.protocol='http';\n    uri.host=uri.hostname=request.headers.host;\n    uri.port=80;\n    uri.query=querystring.parse(uri.query);\n\n    if(request.connection.encrypted){\n        uri.protocol='https';\n        uri.port=443;\n    }\n\n    (\n        function(){\n            if(!uri.host){\n                return;\n            }\n            const host=uri.host.split(':');\n\n            if(!host[1]){\n                return;\n            }\n            uri.host=uri.hostname=host[0];\n            uri.port=host[1];\n        }\n    )();\n\n    for(let key in uri){\n        if(uri[key]!==null){\n            continue;\n        }\n        uri[key]='';\n    }\n\n    request.uri=uri;\n\n    //return any value to force delayed serving\n    if(\n        this.onRawRequest(\n            request,\n            response,\n            completeServing.bind(this)\n        )\n    ){\n        return;\n    };\n\n    uri=uri.pathname;\n\n    if (uri=='/'){\n        uri=`/${this.config.server.index}`;\n    }\n\n    let hostname= [];\n\n    if (request.headers.host !== undefined){\n        hostname = request.headers.host.split(':');\n    }\n\n    let root = this.config.root;\n\n    if(this.config.verbose){\n        console.log(`${this.config.logID} REQUEST ###\\n\\n`,\n            request.headers,'\\n',\n            uri,'\\n\\n',\n            hostname,'\\n\\n'\n        );\n    }\n\n    if(this.config.domain!='0.0.0.0' && hostname.length > 0 && hostname[0]!=this.config.domain){\n        if(!this.config.domains[hostname[0]]){\n            if(this.config.verbose){\n                console.log(`${this.config.logID} INVALID HOST ###\\n\\n`);\n            }\n            this.serveFile(hostname[0],false,response);\n            return;\n        }\n        root=this.config.domains[hostname[0]];\n    }\n\n\n    if(this.config.verbose){\n        console.log(`${this.config.logID} USING ROOT : ${root}###\\n\\n`);\n    }\n\n    if(uri.slice(-1)=='/'){\n        uri+=this.config.server.index;\n    }\n\n    request.url=uri;\n    request.serverRoot=root;\n\n    //return any value to force delayed serving\n    if(\n        this.onRequest(\n            request,\n            response,\n            completeServing.bind(this)\n        )\n    ){\n        return;\n    };\n\n    const filename = path.join(\n        request.serverRoot,\n        request.url\n    );\n\n    fs.exists(\n        filename,\n        function fileExists(exists){\n            this.serveFile(filename,exists,request,response);\n        }.bind(this)\n    );\n}\n\n\n/*********************\n*  SERVER CLASS\n*********************/\nclass Server{\n    constructor(){\n        Object.defineProperties(\n            this,\n            {\n                deploy:{\n                    value:deploy,\n                    writable:false,\n                    enumerable:true\n                },\n                serveFile:{\n                    value:serveFile,\n                    writable:false,\n                    enumerable:false\n                },\n                //executed before any processing of request. If returns true response serving will be delayed.\n                onRawRequest:{\n                    value:function(request,response,serve){},\n                    writable:true,\n                    enumerable:true\n                },\n                //executed just after request recieved allowing user to modify if needed. If returns true response serving will be delayed.\n                onRequest:{\n                    value:function(request,response,serve){},\n                    writable:true,\n                    enumerable:true\n                },\n                //executed just before response sent allowing user to modify if needed. If returns true response serving will be delayed.\n                beforeServe:{\n                    value:function beforeServe(request,response,body,encoding,serve){},\n                    writable:true,\n                    enumerable:true\n                },\n                //executed after each full response completely sent\n                afterServe:{\n                    value:function afterServe(request){},\n                    writable:true,\n                    enumerable:true\n                },\n                serve:{\n                    value:serve,\n                    writable:false,\n                    enumerable:false\n                },\n                //kept for backwards compatibility\n                configTemplate  :{\n                    value:function configTemplate(config){\n                        return new Config(config);\n                    },\n                    writable:false,\n                    //not visible because this is just for backwards compatibility\n                    enumerable:false\n                },\n                Config:{\n                    value:Config,\n                    writable:false,\n                    enumerable:true\n                },\n                Server:{\n                    value:Server,\n                    writable:false,\n                    enumerable:true\n                }\n            }\n        );\n    }\n}\n\nmodule.exports=new Server;\n","/home/travis/build/npmtest/node-npmtest-node-http-server/node_modules/node-http-server/server/Config.js":"'use strict';\n\nconst fs=require('fs');\n\nconst passedArgs = process.argv.splice(2),\n    argCount = passedArgs.length,\n    args = {},\n    defaults = {\n        port    : 8080,\n        root    : process.cwd(),\n        domain  : '0.0.0.0',\n        index   : 'index.html',\n        log     : false\n    };\n\nfor(let i=0; i<argCount; i++){\n    const data=passedArgs[i].split('=');\n    args[data[0]]=data[1];\n}\n\n/**************************************\\\n *\n *    These are the valid basic configs\n *    that can be passed when deploying\n *    a server, content types are dynamic\n *    so you can pass whatever you like\n *\n * ************************************/\n\nconst defaultConfigs={\n    verbose     : (args.verbose=='true')||false,\n    port        : args.port||defaults.port,\n    root        : args.root||defaults.root,\n    domain      : args.domain||defaults.domain,\n    log         : false,\n    //pass this as config for custom logging\n    logFunction : serverLogging,\n    domains   : {\n        /*******************\\\n         * domain  : /that/domains/root/dir\n         *\n         * for sub domains, specify the whole host i.e. \"my.sub.domain\"\n         * you may need to edit your hosts file, cnames or iptable\n         * domain or my.domain etc. goes to 127.0.0.1 for local development\n         * *****************/\n    },\n    server      : {\n        index   : args.index||defaults.index,\n        noCache : args.noCache=='false' ? false : true,\n        timeout : 30000 //30 second timeout\n    },\n    https:{\n        ca:'',\n        privateKey:'',\n        certificate:'',\n        port:443,\n        only:false\n    },\n    contentType : {\n        html    : 'text/html',\n        css     : 'text/css',\n        js      : 'text/javascript',\n        json    : 'application/json',\n        txt     : 'text/plain',\n        jpeg    : 'image/jpeg',\n        jpg     : 'image/jpeg',\n        png     : 'image/png',\n        gif     : 'image/gif',\n        ico     : 'image/x-icon',\n        appcache: 'text/cache-manifest'\n    },\n    restrictedType: {\n\n    },\n    errors:{\n        headers : {\n            'Content-Type' : 'text/plain'\n        },\n        404: '404 MIA',\n        415: '415 File type not supported',\n        403: '403 Access Denied',\n        500: '500 {{err}}'\n    }\n};\n\nfunction serverLogging(data){\n    fs.exists(\n        this.log,\n        function serverLogExsits(exists){\n            data.timestamp=new Date().getTime();\n\n            const JSONData=JSON.stringify(data);\n            let method='appendFile';\n            if(!exists){\n                method='writeFile';\n            }\n            fs[method](\n                this.log,\n                JSONData,\n                function fsMethod(err) {\n                    if(err){\n                        console.log(err);\n                    }\n                }\n            );\n        }.bind(this)\n    );\n}\n\n\n/**************************************\\\n *    Config Class.\n * ************************************/\n\nclass Config{\n    constructor(userConfig){\n        //for backwards compatibility\n        const config = {};\n        Object.defineProperties(\n            config,\n            {\n                verbose     : {\n                    value:defaultConfigs.verbose,\n                    enumerable:true,\n                    writable:true\n                },\n                port        : {\n                    value:defaultConfigs.port,\n                    enumerable:true,\n                    writable:true\n                },\n                root        : {\n                    value:defaultConfigs.root,\n                    enumerable:true,\n                    writable:true\n                },\n                domain      : {\n                    value:defaultConfigs.domain,\n                    enumerable:true,\n                    writable:true\n                },\n                https       : {\n                    value:defaultConfigs.https,\n                    enumerable:true,\n                    writable:true\n                },\n                log         : {\n                    value:defaultConfigs.log,\n                    enumerable:true,\n                    writable:true\n                },\n                //pass this as config for custom logging\n                logFunction : {\n                    value:defaultConfigs.logFunction,\n                    enumerable:true,\n                    writable:true\n                },\n                domains     : {\n                    value:defaultConfigs.domains,\n                    enumerable:true,\n                    writable:true\n                },\n                server      : {\n                    value:defaultConfigs.server,\n                    enumerable:true,\n                    writable:true\n                },\n                contentType : {\n                    value:defaultConfigs.contentType,\n                    enumerable:true,\n                    writable:true\n                },\n                restrictedType: {\n                    value:defaultConfigs.restrictedType,\n                    enumerable:true,\n                    writable:true\n                },\n                errors      : {\n                    value:defaultConfigs.errors,\n                    enumerable:true,\n                    writable:true\n                }\n            }\n        );\n\n        if(userConfig){\n            for(const k in userConfig){\n                config[k]=userConfig[k];\n            }\n        }\n\n        //this is to allow backwards compatibility with configTemplate\n        return config;\n    }\n}\n\nmodule.exports=Config;\n"}